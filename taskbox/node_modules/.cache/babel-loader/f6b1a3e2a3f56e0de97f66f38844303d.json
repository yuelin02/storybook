{"ast":null,"code":"// container components\nimport { createStore } from 'redux';\nimport { taggedTemplateExpression } from '@babel/types'; //\"names\" of the changes that can happen to the store\n\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK'\n}; // The action creators bundle actions with the data required to execute them\n\nexport const archiveTask = id => ({\n  type: actions.ARCHIVE_TASK,\n  id\n});\nexport const pinTask = id => ({\n  type: actions.PIN_TASK,\n  id\n}); // All the reducers simple change the state of a single task.\n\nfunction taskStateReducer(taskState) {\n  return (state, action) => {\n    return { ...state,\n      tasks: state.tasks.map(task => task.id === action.id ? { ...task,\n        state: taskState\n      } : task) // Question: is above arrow function equal to:   -- ?????\n\n      /*\n          tasks: state.tasks.map(function (task) {\n              if(task.id === action.id){\n                  return { ...task, state: taskState}\n              };\n              return task\n          }),\n      */\n\n    };\n  };\n} // The reducer describes how the contents of the store change for each action\n\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actions.ARCHIVE_TASK:\n      return taskStateReducer('TASK_ARCHIVED')(state, action);\n\n    case actions.PIN_TASK:\n      return taskStateReducer('TASK_PINNED')(state, action);\n\n      defaul: return state;\n\n  }\n}; //initial state of the store when the app loads. usually would fetch this from a server\n\nconst defaultTasks = [{\n  id: '1',\n  title: 'Something',\n  state: 'TASK_INBOX'\n}, {\n  id: '2',\n  title: 'Something more',\n  state: 'TASK_INBOX'\n}, {\n  id: '3',\n  title: 'Something else',\n  state: 'TASK_INBOX'\n}, {\n  id: '4',\n  title: 'Something again',\n  state: 'TASK_INBOX'\n}]; //export the constructed redux store\n\nexport default createStore(reducer, {\n  tasks: defaultTasks\n});","map":{"version":3,"sources":["/Users/yuelin/Documents/01 Personal/Dev/storybook/taskbox/src/lib/redux.js"],"names":["createStore","taggedTemplateExpression","actions","ARCHIVE_TASK","PIN_TASK","archiveTask","id","type","pinTask","taskStateReducer","taskState","state","action","tasks","map","task","reducer","defaul","defaultTasks","title"],"mappings":"AAAA;AAEA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,wBAAT,QAAyC,cAAzC,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAG;AACnBC,EAAAA,YAAY,EAAE,cADK;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAAhB,C,CAKP;;AACA,OAAO,MAAMC,WAAW,GAAGC,EAAE,KAAK;AAAEC,EAAAA,IAAI,EAAEL,OAAO,CAACC,YAAhB;AAA8BG,EAAAA;AAA9B,CAAL,CAAtB;AACP,OAAO,MAAME,OAAO,GAAGF,EAAE,KAAK;AAAEC,EAAAA,IAAI,EAAEL,OAAO,CAACE,QAAhB;AAA0BE,EAAAA;AAA1B,CAAL,CAAlB,C,CAEP;;AACA,SAASG,gBAAT,CAA0BC,SAA1B,EAAqC;AACjC,SAAO,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtB,WAAO,EACH,GAAGD,KADA;AAEHE,MAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAgBC,IAAI,IACvBA,IAAI,CAACT,EAAL,KAAYM,MAAM,CAACN,EAAnB,GAAwB,EAAE,GAAGS,IAAL;AAAWJ,QAAAA,KAAK,EAAED;AAAlB,OAAxB,GAAwDK,IADrD,CAFJ,CAMH;;AAEA;;;;;;;;;AARG,KAAP;AAkBH,GAnBD;AAoBH,C,CACD;;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACL,IAAf;AACI,SAAKL,OAAO,CAACC,YAAb;AACI,aAAOM,gBAAgB,CAAC,eAAD,CAAhB,CAAkCE,KAAlC,EAAyCC,MAAzC,CAAP;;AACJ,SAAKV,OAAO,CAACE,QAAb;AACI,aAAOK,gBAAgB,CAAC,aAAD,CAAhB,CAAgCE,KAAhC,EAAuCC,MAAvC,CAAP;;AACJK,MAAAA,MAAM,EACF,OAAON,KAAP;;AANR;AAQH,CATM,C,CAWP;;AACA,MAAMO,YAAY,GAAG,CACjB;AAAEZ,EAAAA,EAAE,EAAC,GAAL;AAAUa,EAAAA,KAAK,EAAC,WAAhB;AAA6BR,EAAAA,KAAK,EAAC;AAAnC,CADiB,EAEjB;AAAEL,EAAAA,EAAE,EAAC,GAAL;AAAUa,EAAAA,KAAK,EAAC,gBAAhB;AAAkCR,EAAAA,KAAK,EAAC;AAAxC,CAFiB,EAGjB;AAAEL,EAAAA,EAAE,EAAC,GAAL;AAAUa,EAAAA,KAAK,EAAC,gBAAhB;AAAkCR,EAAAA,KAAK,EAAC;AAAxC,CAHiB,EAIjB;AAAEL,EAAAA,EAAE,EAAC,GAAL;AAAUa,EAAAA,KAAK,EAAC,iBAAhB;AAAmCR,EAAAA,KAAK,EAAC;AAAzC,CAJiB,CAArB,C,CAOA;;AACA,eAAeX,WAAW,CAACgB,OAAD,EAAU;AAAEH,EAAAA,KAAK,EAAEK;AAAT,CAAV,CAA1B","sourcesContent":["// container components\n\nimport { createStore } from 'redux';\nimport { taggedTemplateExpression } from '@babel/types';\n\n//\"names\" of the changes that can happen to the store\nexport const actions = {\n    ARCHIVE_TASK: 'ARCHIVE_TASK',\n    PIN_TASK: 'PIN_TASK',\n};\n\n// The action creators bundle actions with the data required to execute them\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\n\n// All the reducers simple change the state of a single task.\nfunction taskStateReducer(taskState) {\n    return (state, action) => {\n        return {\n            ...state,\n            tasks: state.tasks.map(task => \n                task.id === action.id ? { ...task, state: taskState } : task\n            ),\n            \n            // Question: is above arrow function equal to:   -- ?????\n\n            /*\n                tasks: state.tasks.map(function (task) {\n                    if(task.id === action.id){\n                        return { ...task, state: taskState}\n                    };\n                    return task\n                }),\n            */\n\n        };\n    };\n}\n// The reducer describes how the contents of the store change for each action\nexport const reducer = (state, action) => {\n    switch (action.type){\n        case actions.ARCHIVE_TASK:\n            return taskStateReducer('TASK_ARCHIVED')(state, action);\n        case actions.PIN_TASK:\n            return taskStateReducer('TASK_PINNED')(state, action);\n        defaul:\n            return state;\n    }\n};\n\n//initial state of the store when the app loads. usually would fetch this from a server\nconst defaultTasks = [\n    { id:'1', title:'Something', state:'TASK_INBOX' },\n    { id:'2', title:'Something more', state:'TASK_INBOX' },\n    { id:'3', title:'Something else', state:'TASK_INBOX' },\n    { id:'4', title:'Something again', state:'TASK_INBOX' },\n];\n\n//export the constructed redux store\nexport default createStore(reducer, { tasks: defaultTasks });"]},"metadata":{},"sourceType":"module"}